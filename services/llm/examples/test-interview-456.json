{
  "interview_id": "test-interview-456",
  "system_prompt": "You are an expert interviewer evaluating technical skills.",
  "rubric": "Technical Skills Assessment:\n1. Problem solving ability (1-10)\n2. Code quality and structure (1-10)\n3. Communication and explanation (1-10)\n4. Handling of edge cases (1-10)",
  "full_transcript": "Interviewer: Please implement a function to find the maximum value in a binary tree.\n\nCandidate: I'll solve this using a recursive approach. First, let me clarify - are we looking for the maximum numeric value in the tree?\n\nInterviewer: Yes, that's correct.\n\nCandidate: Great. Here's my solution:\n\ndef find_max_in_tree(root):\n    if not root:\n        return float('-inf')\n    \n    left_max = find_max_in_tree(root.left)\n    right_max = find_max_in_tree(root.right)\n    \n    return max(root.val, left_max, right_max)\n\nThis recursively finds the maximum in left and right subtrees, then returns the maximum of the current node and both subtree maximums.\n\nInterviewer: Good solution. How would you handle edge cases?\n\nCandidate: The main edge case is an empty tree, which I handle by returning negative infinity. For a single node, the recursive calls return negative infinity, so we correctly return the node's value.\n\nInterviewer: What's the time complexity?\n\nCandidate: O(n) where n is the number of nodes, since we visit each node exactly once. Space complexity is O(h) where h is the height due to the call stack."
}